#if (${PACKAGE_NAME} && ${PACKAGE_NAME} != "")package ${PACKAGE_NAME};#end

import android.view.LayoutInflater
import android.view.ViewGroup
import androidx.recyclerview.widget.DiffUtil
import androidx.recyclerview.widget.ListAdapter
import androidx.recyclerview.widget.RecyclerView

/**
 * A [RecyclerView] adapter file that implements
 * [ListAdapter] class.
 * 
 * @author ${USER}
 * @since ${DATE}
 */
class ${NAME}() : ListAdapter<${Item_type}, ${NAME}.${ViewHolder_class}>(DifferChecker) {
    
    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int) = 
        ${ViewHolder_class}.from(parent)

    override fun onBindViewHolder(holder: ${ViewHolder_class}, position: Int) =
        holder.bind(getItem(position))

    class ${ViewHolder_class} private constructor(private val binding: ${Binding_class}) : RecyclerView.ViewHolder(binding.root) {
        fun bind(item: Int) {
            // set binding variables if any...

            /**
             * causes the properties updates to execute immediately.
             * since I'm calling [bind] from [onBindViewHolder]
             * having the bindings execute immediately. as a practice
             * can prevent the recycler view from having to perform
             * extra calculations when it figures out how to display
             * the list.
             */
            binding.executePendingBindings()
        }

        companion object {
            fun from(parent: ViewGroup): ${ViewHolder_class} {
                val layoutInflater = LayoutInflater.from(parent.context)
                val binding = ${Binding_class}.inflate(layoutInflater, parent, false)

                return ${ViewHolder_class}(binding)
            }
        }
    }

    /**
     * Callback for calculating the diff between two non-null items in a list.
     *
     * Used by [ListAdapter] to calculate the minimum number of changes between
     * and old list and a new list that's been passed to [submitList].
     */
    companion object DifferChecker : DiffUtil.ItemCallback<Int>() {
        // We should use referential equality operator - triple equal sign (===) - which returns
        // true if the object references are the same
        override fun areItemsTheSame(oldItem: ${Item_type}, newItem: ${Item_type}) = oldItem === newItem

        override fun areContentsTheSame(oldItem: ${Item_type}, newItem: ${Item_type}) =
            TODO("modify this function by checking items' uniquely identifiers")
    }
}
