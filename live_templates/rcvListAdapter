class $adapter$() : androidx.recyclerview.widget.ListAdapter<$listItemType$, $adapter$.$viewHolder$>($diffCallback$) {
    
    override fun onCreateViewHolder(parent: android.view.ViewGroup, viewType: Int) = $viewHolder$.from(parent)
    
    override fun onBindViewHolder(holder: $viewHolder$, position: Int) =
        holder.bind(getItem(position))
    
    class $viewHolder$ private constructor(private val binding: $binding$) : androidx.recyclerview.widget.RecyclerView.ViewHolder(binding.root) {
        fun bind(item: $listItemType$) {
            // set binding variables if any...
            
            /**
             * causes the properties updates to execute immediately.
             * since I'm calling [bind] from [onBindViewHolder] 
             * having the bindings execute immediately. as a practice
             * can prevent the recycler view from having to perform 
             * extra calculations when it figures out how to display 
             * the list.
             */
            binding.executePendingBindings()
        }

        companion object {
            fun from(parent: android.view.ViewGroup): $viewHolder$ {
                val layoutInflater = android.view.LayoutInflater.from(parent.context)
                val binding = $binding$.inflate(layoutInflater, parent, false)

                return $viewHolder$(binding)
            }
        }
    }

    /**
     * Callback for calculating the diff between two non-null items in a list.
     *
     * Used by ListAdapter to calculate the minimum number of changes between 
     * and old list and a new list that's been passed to [submitList].
     */
    companion object $diffCallback$ : androidx.recyclerview.widget.DiffUtil.ItemCallback<$listItemType$>() {
        // We should use referential equality operator - triple equal sign (===) - which returns
        // true if the object references are the same
        override fun areItemsTheSame(oldItem: $listItemType$, newItem: $listItemType$) = oldItem === newItem

        override fun areContentsTheSame(oldItem: $listItemType$, newItem: $listItemType$) =
            TODO("modify this function by checking items' uniquely identifiers")
    }
}
